apiVersion: v1
kind: Namespace
metadata:
  name: retaildemo
  labels:
    name: retaildemo

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: retaildemo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: retailapp
      tier: backend
  template:
    metadata:
      labels:
        app: retailapp
        tier: backend
    spec:
      containers:
        - name: retail-app-server
          image: 756795388794.dkr.ecr.eu-west-1.amazonaws.com/air-da-server:latest
          # Set this to "Always" for the cloud, and "Never" if deploying to Minikube locally.
          imagePullPolicy: "Always"
          ports:
            - name: tcp
              containerPort: 5000
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: retaildemo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: retailapp
      tier: frontend
  template:
    metadata:
      labels:
        app: retailapp
        tier: frontend
    spec:
      containers:
        - name: retail-app-client
          image: 756795388794.dkr.ecr.eu-west-1.amazonaws.com/air-da-client:latest
          # Set this to "Always" for the cloud, and "Never" if deploying to Minikube locally.
          imagePullPolicy: "Always"
          ports:
            - containerPort: 9005
          volumeMounts:
            - name: config
              mountPath: /etc/nginx/conf.d
      volumes:
        - name: config
          configMap:
            name: nginx-config

---
apiVersion: v1
kind: Service
metadata: 
  name: backend-service
  namespace: retaildemo
spec:
  selector:
    app: retailapp
    tier: backend
  ports:
  - protocol: TCP
    port: 800
    targetPort: 5000
  type: NodePort
---

apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: retaildemo
spec:
  selector:
    app: retailapp
    tier: frontend
  ports:
  - protocol: "TCP"
    port: 80
    targetPort: 80
  type: LoadBalancer

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: retaildemo
data:
  nginx.conf: |
      server {
        # Running port
        listen 80;
        server_name  localhost;

        location / {          
          root /usr/share/nginx/html;
          try_files $uri $uri/ =404; 
        }

        location ~ ^/api {
          set $backend_name backend-service;
          set $namespace retaildemo;
          
          resolver kube-dns.kube-system.svc.cluster.local valid=5s;

          proxy_pass http://$backend_name.$namespace.svc.cluster.local$uri$is_args$args;
          proxy_set_header Host $host;
        }
      }

# ---
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: minimal-ingress
#   annotations:
#     nginx.ingress.kubernetes.io/rewrite-target: /
# spec:
#   ingressClassName: nginx-example
#   rules:
#   - http:
#       paths:
#       - path: /testpath
#         pathType: Prefix
#         backend:
#           service:
#             name: test
#             port:
#               number: 80